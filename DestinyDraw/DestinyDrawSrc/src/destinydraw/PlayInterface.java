/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package destinydraw;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 *
 * @author Piyaphol Wiengperm
 * @author Thanakrit Daowrueang
 */
public class PlayInterface extends javax.swing.JFrame {

    public static boolean helpCheck = true;
    static int helpTime = 0;
    public static int round = -1;
    private static int count = 0;
    private String[] playerCard;
    private String[] dealerCard;
    private int playerScore = 0;
    private int dealerScore = 0;
    private static long money = 1000;
    private static long moneyBet = 0;

    /**
     * Creates new form PlayInterface
     */
    public PlayInterface() {
         Hand.drawCardPlayer();
        Hand.drawCardDealer();
        this.setPreferredSize(new Dimension(1089, 595));
        this.setMinimumSize(new Dimension(1089, 595));
        this.setLocationRelativeTo(null);
        initComponents();
        timeRunner();
        MoneyShow.setText("Money : " + String.valueOf(money));
    }

    public void setHelp() {
        Help.setEnabled(helpCheck);
    }

    public void timeRunner() {
        Timer time = new Timer(0, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                helpTime++;
                if (helpTime % 10 == 0) {
                    setHelp();
                }
            }

        });
        time.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        player8 = new javax.swing.JLabel();
        player7 = new javax.swing.JLabel();
        player6 = new javax.swing.JLabel();
        player5 = new javax.swing.JLabel();
        player4 = new javax.swing.JLabel();
        player3 = new javax.swing.JLabel();
        player2 = new javax.swing.JLabel();
        player1 = new javax.swing.JLabel();
        dealer8 = new javax.swing.JLabel();
        dealer7 = new javax.swing.JLabel();
        dealer6 = new javax.swing.JLabel();
        dealer5 = new javax.swing.JLabel();
        dealer4 = new javax.swing.JLabel();
        dealer3 = new javax.swing.JLabel();
        dealer2 = new javax.swing.JLabel();
        dealer1 = new javax.swing.JLabel();
        MoneyShow = new javax.swing.JLabel();
        MoneyBet = new javax.swing.JLabel();
        Deckofcard = new javax.swing.JLabel();
        DealerScore = new javax.swing.JLabel();
        PlayerScore = new javax.swing.JLabel();
        coin5 = new javax.swing.JButton();
        coin25 = new javax.swing.JButton();
        coin100 = new javax.swing.JButton();
        coin500 = new javax.swing.JButton();
        coin1000 = new javax.swing.JButton();
        Play = new javax.swing.JButton();
        Hit = new javax.swing.JButton();
        Stand = new javax.swing.JButton();
        Help = new javax.swing.JButton();
        Back = new javax.swing.JButton();
        Double = new javax.swing.JButton();
        Background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        setSize(new java.awt.Dimension(1090, 580));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        player8.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(player8, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 250, 110, 160));

        player7.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(player7, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 250, 110, 160));

        player6.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(player6, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 250, 110, 160));

        player5.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(player5, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 250, 110, 160));

        player4.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(player4, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 250, 110, 160));

        player3.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(player3, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 250, 110, 160));

        player2.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(player2, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 250, 110, 160));

        player1.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(player1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 250, 110, 160));

        dealer8.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(dealer8, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 40, 110, 160));

        dealer7.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(dealer7, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 40, 110, 160));

        dealer6.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(dealer6, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 40, 110, 160));

        dealer5.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(dealer5, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 40, 110, 160));

        dealer4.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(dealer4, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 40, 110, 160));

        dealer3.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(dealer3, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 40, 110, 160));

        dealer2.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(dealer2, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 40, 110, 160));

        dealer1.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(dealer1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 40, 110, 160));

        MoneyShow.setFont(new java.awt.Font("DIN Alternate", 1, 24)); // NOI18N
        MoneyShow.setForeground(new java.awt.Color(255, 255, 255));
        MoneyShow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/Money.png"))); // NOI18N
        MoneyShow.setText("Money: 1000");
        MoneyShow.setToolTipText("");
        getContentPane().add(MoneyShow, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 490, 310, 70));

        MoneyBet.setFont(new java.awt.Font("DIN Alternate", 1, 24)); // NOI18N
        MoneyBet.setForeground(new java.awt.Color(240, 240, 240));
        MoneyBet.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/BetMoney.png"))); // NOI18N
        MoneyBet.setText("Bet: 0");
        MoneyBet.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().add(MoneyBet, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 490, 250, 80));

        Deckofcard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/Deckofcard.png"))); // NOI18N
        getContentPane().add(Deckofcard, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, 110, 180));

        DealerScore.setFont(new java.awt.Font("DIN Alternate", 0, 36)); // NOI18N
        DealerScore.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(DealerScore, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 70, 50, 60));

        PlayerScore.setFont(new java.awt.Font("DIN Alternate", 0, 36)); // NOI18N
        PlayerScore.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(PlayerScore, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 340, 50, 60));

        coin5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/5coin.png"))); // NOI18N
        coin5.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        coin5.setContentAreaFilled(false);
        coin5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        coin5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coin5ActionPerformed(evt);
            }
        });
        getContentPane().add(coin5, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 500, 60, 60));

        coin25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/25coin.png"))); // NOI18N
        coin25.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        coin25.setContentAreaFilled(false);
        coin25.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        coin25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coin25ActionPerformed(evt);
            }
        });
        getContentPane().add(coin25, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 510, 60, 60));

        coin100.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/100coin.png"))); // NOI18N
        coin100.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        coin100.setContentAreaFilled(false);
        coin100.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        coin100.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coin100ActionPerformed(evt);
            }
        });
        getContentPane().add(coin100, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 510, 60, 60));

        coin500.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/500coin.png"))); // NOI18N
        coin500.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        coin500.setContentAreaFilled(false);
        coin500.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        coin500.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coin500ActionPerformed(evt);
            }
        });
        getContentPane().add(coin500, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 510, 60, 60));

        coin1000.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/1000coin.png"))); // NOI18N
        coin1000.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        coin1000.setContentAreaFilled(false);
        coin1000.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        coin1000.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coin1000ActionPerformed(evt);
            }
        });
        getContentPane().add(coin1000, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 500, 60, 60));

        Play.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/playbutton.png"))); // NOI18N
        Play.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        Play.setContentAreaFilled(false);
        Play.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayActionPerformed(evt);
            }
        });
        getContentPane().add(Play, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 60, 150, 70));

        Hit.setFont(new java.awt.Font("DIN Alternate", 1, 24)); // NOI18N
        Hit.setForeground(new java.awt.Color(255, 255, 255));
        Hit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/hitbutton.png"))); // NOI18N
        Hit.setText("HIT");
        Hit.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        Hit.setContentAreaFilled(false);
        Hit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Hit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HitActionPerformed(evt);
            }
        });
        getContentPane().add(Hit, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 150, 160, 50));

        Stand.setFont(new java.awt.Font("DIN Alternate", 1, 24)); // NOI18N
        Stand.setForeground(new java.awt.Color(255, 255, 255));
        Stand.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/standbutton.png"))); // NOI18N
        Stand.setText("STAND");
        Stand.setToolTipText("");
        Stand.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        Stand.setContentAreaFilled(false);
        Stand.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Stand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StandActionPerformed(evt);
            }
        });
        getContentPane().add(Stand, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 210, 170, 80));

        Help.setFont(new java.awt.Font("DIN Alternate", 1, 24)); // NOI18N
        Help.setForeground(new java.awt.Color(255, 255, 255));
        Help.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/helpbutton.png"))); // NOI18N
        Help.setText("HELP");
        Help.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        Help.setBorderPainted(false);
        Help.setContentAreaFilled(false);
        Help.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpActionPerformed(evt);
            }
        });
        getContentPane().add(Help, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 380, 120, -1));

        Back.setForeground(new java.awt.Color(255, 255, 255));
        Back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/backbutton.png"))); // NOI18N
        Back.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        Back.setBorderPainted(false);
        Back.setContentAreaFilled(false);
        Back.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });
        getContentPane().add(Back, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 80, 70));

        Double.setFont(new java.awt.Font("DIN Alternate", 1, 24)); // NOI18N
        Double.setForeground(new java.awt.Color(255, 255, 255));
        Double.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/doublebutton.png"))); // NOI18N
        Double.setText("DOUBLE");
        Double.setToolTipText("");
        Double.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        Double.setContentAreaFilled(false);
        Double.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Double.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DoubleActionPerformed(evt);
            }
        });
        getContentPane().add(Double, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 290, 170, 80));

        Background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/tableBackground.png"))); // NOI18N
        getContentPane().add(Background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1090, 580));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void HitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HitActionPerformed
        if (moneyBet != 0) {
            if (round == -1) {
                JOptionPane.showMessageDialog(null, "       Please click PLAY button to start", "Error", 0);
            } else if (round == 10) {
                JOptionPane.showMessageDialog(null, "       Please click STAND button to check", "Error", 0);

            } else {
                Double.setEnabled(false);
                switch (round) {

                    case 0:
                        player3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + playerCard[2] + ".png")));
                        round++;
                        playerScore += Hand.cardValuePlayer[2];
                        PlayerScore.setText(String.valueOf(playerScore));

                        checkBlackjackPlayer(playerScore);

                        break;
                    case 1:
                        player4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + playerCard[3] + ".png")));
                        round++;
                        playerScore += Hand.cardValuePlayer[3];
                        PlayerScore.setText(String.valueOf(playerScore));

                        checkBlackjackPlayer(playerScore);

                        break;
                    case 2:
                        player5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + playerCard[4] + ".png")));
                        round++;
                        playerScore += Hand.cardValuePlayer[4];
                        PlayerScore.setText(String.valueOf(playerScore));

                        checkBlackjackPlayer(playerScore);

                        break;
                    case 3:
                        player6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + playerCard[5] + ".png")));
                        round++;
                        playerScore += Hand.cardValuePlayer[5];
                        PlayerScore.setText(String.valueOf(playerScore));

                        checkBlackjackPlayer(playerScore);

                        break;
                    case 4:
                        player7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + playerCard[6] + ".png")));
                        round++;
                        playerScore += Hand.cardValuePlayer[6];
                        PlayerScore.setText(String.valueOf(playerScore));

                        checkBlackjackPlayer(playerScore);

                        break;
                    case 5:
                        player8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + playerCard[7] + ".png")));
                        round++;
                        playerScore += Hand.cardValuePlayer[7];
                        PlayerScore.setText(String.valueOf(playerScore));

                        checkBlackjackPlayer(playerScore);

                        break;
                    default:
                        break;
                }
            }
        } else {
            if(money==0&&moneyBet==0){
             JOptionPane.showMessageDialog(null, "You need to go back to start menu and click start to reset your money", "Error", 0);
           
             }else{JOptionPane.showMessageDialog(null, "        Please bet before start to play", "Error", 0);
           
            }    }
    }//GEN-LAST:event_HitActionPerformed

    private void StandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StandActionPerformed
//        playSound("Play");
        if (moneyBet != 0) {
            if (round == -1) {
                JOptionPane.showMessageDialog(null, "        Please click PLAY button to start", "Error", 0);
                round = -1;
            } else {
                for (int i = 1; i < dealerCard.length; i++) {
                    dealerScore += Hand.cardValueDealer[i];
                    if (dealerScore < 17) {
                        count++;
                    } else {
                        break;
                    }
                }
                switch (count) {
                    case 0:
                        dealer2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[1] + ".png")));
                        DealerScore.setText(String.valueOf(dealerScore));
                        if (dealerScore == 21) {
                            JOptionPane.showMessageDialog(null, "          Dealer got Blackjack!\n           Click PLAY to play again", "Match Ended", 0);
                            money -= moneyBet;
                            showMoneyAndBet();
                            reset();

                        } else {
                            checkWinORLose(playerScore, dealerScore);
                            reset();
                        }
                        break;
                    case 1:
                        dealer2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[1] + ".png")));
                        dealer3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[2] + ".png")));
                        DealerScore.setText(String.valueOf(dealerScore));
                        checkWinORLose(playerScore, dealerScore);
                        reset();
                        break;
                    case 2:
                        dealer2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[1] + ".png")));
                        dealer3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[2] + ".png")));
                        dealer4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[3] + ".png")));
                        DealerScore.setText(String.valueOf(dealerScore));
                        checkWinORLose(playerScore, dealerScore);
                        reset();
                        break;
                    case 3:
                        dealer2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[1] + ".png")));
                        dealer3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[2] + ".png")));
                        dealer4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[3] + ".png")));
                        dealer5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[4] + ".png")));
                        DealerScore.setText(String.valueOf(dealerScore));
                        checkWinORLose(playerScore, dealerScore);
                        reset();
                        break;
                    case 4:
                        dealer2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[1] + ".png")));
                        dealer3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[2] + ".png")));
                        dealer4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[3] + ".png")));
                        dealer5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[4] + ".png")));
                        dealer6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[5] + ".png")));
                        DealerScore.setText(String.valueOf(dealerScore));
                        checkWinORLose(playerScore, dealerScore);
                        reset();
                        break;
                    case 5:
                        dealer2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[1] + ".png")));
                        dealer3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[2] + ".png")));
                        dealer4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[3] + ".png")));
                        dealer5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[4] + ".png")));
                        dealer6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[5] + ".png")));
                        dealer7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[6] + ".png")));
                        DealerScore.setText(String.valueOf(dealerScore));
                        checkWinORLose(playerScore, dealerScore);
                        reset();
                        break;         
                    case 6:
                        dealer2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[1] + ".png")));
                        dealer3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[2] + ".png")));
                        dealer4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[3] + ".png")));
                        dealer5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[4] + ".png")));
                        dealer6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[5] + ".png")));
                        dealer7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[6] + ".png")));
                        dealer8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[7] + ".png")));
                        DealerScore.setText(String.valueOf(dealerScore));
                        checkWinORLose(playerScore, dealerScore);
                        reset();
                        break;                    
                    default:
                        break;
                }
            }
        } else {
            if(money==0&&moneyBet==0){
             JOptionPane.showMessageDialog(null, "You need to go back to start menu and click start to reset your money", "Error", 0);
           
             }else{JOptionPane.showMessageDialog(null, "        Please bet before start to play", "Error", 0);
           
            }
        }
    }//GEN-LAST:event_StandActionPerformed
    private void PlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayActionPerformed
        setCoin(false);
        if (moneyBet != 0) {

            if (round != 10) {
                round = 0;

                playerCard = Hand.cardFilePlayer;
                dealerCard = Hand.cardFileDealer;

                player1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + playerCard[0] + ".png")));
                player2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + playerCard[1] + ".png")));

                dealer1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + dealerCard[0] + ".png")));
                dealer2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/backOfCard.jpg")));

                playerScore = Hand.cardValuePlayer[0] + Hand.cardValuePlayer[1];
                PlayerScore.setText(String.valueOf(playerScore));

                dealerScore = Hand.cardValueDealer[0];
                DealerScore.setText(String.valueOf(dealerScore));
                
                Back.setEnabled(false);

                checkBlackjackPlayer(playerScore);
                checkBlackjackDealer(dealerScore);
                Play.setEnabled(false);

                if (playerScore == 21) {
                    JOptionPane.showMessageDialog(null, "          You got Blackjack!\n          Click PLAY to play again", "Match Ended", 0);
                    money += moneyBet * 3;
                    showMoneyAndBet();            
                    reset();
                }

            } else {
            }
        } else {
             if(money==0&&moneyBet==0){
             JOptionPane.showMessageDialog(null, "You need to go back to start menu and click start to reset your money", "Error", 0);
           
             }else{JOptionPane.showMessageDialog(null, "        Please bet before start to play", "Error", 0);
           
            }
             setCoin(true);
        }


    }//GEN-LAST:event_PlayActionPerformed

    private void setCoin(boolean command){
        coin5.setEnabled(command);
        coin25.setEnabled(command);
        coin100.setEnabled(command);
        coin500.setEnabled(command);
        coin1000.setEnabled(command);
    }
    
    private void coin25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coin25ActionPerformed

        if (round == 0||round == 10) {
            JOptionPane.showMessageDialog(null, "        Cannot bet during the round!", "Error", 0);
        } else {
            bet(25);

        }
    }//GEN-LAST:event_coin25ActionPerformed

    private void coin1000ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coin1000ActionPerformed

        if (round == 0||round == 10) {
            JOptionPane.showMessageDialog(null, "        Cannot bet during the round!", "Error", 0);
        } else {
            bet(1000);

        }
    }//GEN-LAST:event_coin1000ActionPerformed

    private void coin5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coin5ActionPerformed

        if (round == 0||round == 10) {
            JOptionPane.showMessageDialog(null, "        Cannot bet during the round!", "Error", 0);
        } else {
            bet(5);

        }
        
    }//GEN-LAST:event_coin5ActionPerformed

    private void coin100ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coin100ActionPerformed

        if (round == 0||round == 10) {
            JOptionPane.showMessageDialog(null, "        Cannot bet during the round!", "Error", 0);
        } else {
            bet(100);

        }
    }//GEN-LAST:event_coin100ActionPerformed

    private void coin500ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coin500ActionPerformed

        if (round == 0||round == 10) {
            JOptionPane.showMessageDialog(null, "        Cannot bet during the round!", "Error", 0);
        } else {
            bet(500);

        }
    }//GEN-LAST:event_coin500ActionPerformed

    private void HelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpActionPerformed
        new InformationPage().setVisible(true);
        helpCheck = false;
        setHelp();
    }//GEN-LAST:event_HelpActionPerformed

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        new StartMenu().setVisible(true);
        this.setVisible(false);
        money += moneyBet;
        moneyBet = 0;
        if (money == 0) {
            money += 1000;
        } else {
        }
    }//GEN-LAST:event_BackActionPerformed

    private void DoubleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DoubleActionPerformed
        if (moneyBet != 0) {
            if (round == -1) {
                JOptionPane.showMessageDialog(null, "        Please click PLAY button to start", "Error", 0);
                round = -1;
            } else {
                if (money < moneyBet) {
                    JOptionPane.showMessageDialog(null, "        You do not have enough money for double!", "Error", 0);

                } else {
                    money -= moneyBet;
                    moneyBet += moneyBet;
                    showMoneyAndBet();

                    player3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DeckOfCard/" + playerCard[2] + ".png")));
                    round++;
                    playerScore += Hand.cardValuePlayer[2];
                    PlayerScore.setText(String.valueOf(playerScore));
                    
                    Double.setEnabled(false);
                    Hit.setEnabled(false);
                    round = 10;
                    
                    checkBlackjackPlayer(playerScore);
                    
                }
            }
        } else {
             if(money==0&&moneyBet==0){
             JOptionPane.showMessageDialog(null, "You need to go back to start menu and click start to reset your money", "Error", 0);
           
             }else{JOptionPane.showMessageDialog(null, "        Please bet before start to play", "Error", 0);
           
            }
        }
        
    }//GEN-LAST:event_DoubleActionPerformed

    /**
     * @param args the command line arguments
     */
    public void showMoneyAndBet() {
        MoneyShow.setText("Money : " + String.valueOf(money));
        MoneyBet.setText("Bet : " + String.valueOf(moneyBet));
    }

    public void checkBlackjackPlayer(int score) {
        if (score > 21) {
            JOptionPane.showMessageDialog(null, "           You busted\n              You lose!\n       Click PLAY to play again", "Match Ended", 0);
            round = 10;
            moneyBet = 0;
            showMoneyAndBet();
            reset();
        }
    }

    public void checkBlackjackDealer(int score) {
        if (score > 21) {
            JOptionPane.showMessageDialog(null, "           Dealer busted\n              You win!\n        Click PLAY to play again", "Match Ended", 0);
            round = 10;
            money += moneyBet * 3;
            moneyBet = 0;
            showMoneyAndBet();
            reset();
        }
    }

    public void checkWinORLose(int playerScore, int dealerScore) {
        if (playerScore <= 21 && dealerScore <= 21) {
            if (playerScore > dealerScore) {
                JOptionPane.showMessageDialog(null, "           You win!\n          Click PLAY to play again", "Match Ended", 0);
                System.out.print("1");
                money += moneyBet * 2;
                moneyBet = 0;
                showMoneyAndBet();
            } else if (playerScore == 21 && dealerScore==21 || playerScore==dealerScore) {
                JOptionPane.showMessageDialog(null, "           Draw game!\n         Click PLAY to play again", "Match Ended", 0);
                System.out.print("2");
                money += moneyBet;
                moneyBet = 0;
                showMoneyAndBet();
            } else {
                JOptionPane.showMessageDialog(null, "           You lose!\n          Click PLAY to play again", "Match Ended", 0);
                System.out.print("3");
                moneyBet = 0;
                showMoneyAndBet();
            }
        } else if (playerScore <= 21 && dealerScore > 21) {
            JOptionPane.showMessageDialog(null, "           Dealer busted\n              You win!\n          Click PLAY to play again", "Match Ended", 0);
            System.out.print("4");
            money += moneyBet * 2;
            moneyBet = 0;
            showMoneyAndBet();

        } else if (playerScore > 21 && dealerScore <= 21) {
            JOptionPane.showMessageDialog(null, "           You busted\n           You lose!\n           Click PLAY to play again", "Match Ended", 0);
            System.out.print("5");
            moneyBet = 0;
            showMoneyAndBet();

        } else {
            JOptionPane.showMessageDialog(null, "           You lose!\n          Click PLAY to play again", "Match Ended", 0);
            System.out.print("6");
            moneyBet = 0;
            showMoneyAndBet();

        }
    }

    public void bet(int value) {
        money -= value;
        showMoneyAndBet();
        if (Money.isEnough(money)) {
            moneyBet += value;
            showMoneyAndBet();
        } else {
            money += value;
            showMoneyAndBet();
             if(money==0&&moneyBet==0){
             JOptionPane.showMessageDialog(null, "You need to go back to start menu and click start to reset your money", "Error", 0);
             }else{
             JOptionPane.showMessageDialog(null, "           You do not have enough money!", "Error", 0);
            }
            
        }
    }

    public void reset() {
        setCoin(true);
        if (moneyBet != 0) {
            money += moneyBet;
            moneyBet = 0;
            showMoneyAndBet();
        } else {
            Deck.newDeck();
            Hand.drawCardPlayer();
            Hand.drawCardDealer();

            player1.setIcon(null);
            player2.setIcon(null);
            player3.setIcon(null);
            player4.setIcon(null);
            player5.setIcon(null);

            dealer1.setIcon(null);
            dealer2.setIcon(null);
            dealer3.setIcon(null);
            dealer4.setIcon(null);
            dealer5.setIcon(null);

            PlayerScore.setText(null);
            DealerScore.setText(null);

            Play.setEnabled(true);
            Double.setEnabled(true);
            Hit.setEnabled(true);
            Back.setEnabled(true);

            playerScore = 0;
            dealerScore = 0;
            moneyBet = 0;

            showMoneyAndBet();

            round = -1;
            count = 0;
        }
    }
    
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {            
                new PlayInterface().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JLabel Background;
    private javax.swing.JLabel DealerScore;
    private javax.swing.JLabel Deckofcard;
    private javax.swing.JButton Double;
    private javax.swing.JButton Help;
    private javax.swing.JButton Hit;
    private javax.swing.JLabel MoneyBet;
    private javax.swing.JLabel MoneyShow;
    private javax.swing.JButton Play;
    private javax.swing.JLabel PlayerScore;
    private javax.swing.JButton Stand;
    private javax.swing.JButton coin100;
    private javax.swing.JButton coin1000;
    private javax.swing.JButton coin25;
    private javax.swing.JButton coin5;
    private javax.swing.JButton coin500;
    private javax.swing.JLabel dealer1;
    private javax.swing.JLabel dealer2;
    private javax.swing.JLabel dealer3;
    private javax.swing.JLabel dealer4;
    private javax.swing.JLabel dealer5;
    private javax.swing.JLabel dealer6;
    private javax.swing.JLabel dealer7;
    private javax.swing.JLabel dealer8;
    private javax.swing.JLabel player1;
    private javax.swing.JLabel player2;
    private javax.swing.JLabel player3;
    private javax.swing.JLabel player4;
    private javax.swing.JLabel player5;
    private javax.swing.JLabel player6;
    private javax.swing.JLabel player7;
    private javax.swing.JLabel player8;
    // End of variables declaration//GEN-END:variables
}
